// Code generated by mockery v2.26.1. DO NOT EDIT.

package download

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTrackInfoFetcher is an autogenerated mock type for the TrackInfoFetcher type
type MockTrackInfoFetcher struct {
	mock.Mock
}

type MockTrackInfoFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrackInfoFetcher) EXPECT() *MockTrackInfoFetcher_Expecter {
	return &MockTrackInfoFetcher_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, url
func (_m *MockTrackInfoFetcher) Get(ctx context.Context, url string) (TrackInfo, error) {
	ret := _m.Called(ctx, url)

	var r0 TrackInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (TrackInfo, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) TrackInfo); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(TrackInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTrackInfoFetcher_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTrackInfoFetcher_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockTrackInfoFetcher_Expecter) Get(ctx interface{}, url interface{}) *MockTrackInfoFetcher_Get_Call {
	return &MockTrackInfoFetcher_Get_Call{Call: _e.mock.On("Get", ctx, url)}
}

func (_c *MockTrackInfoFetcher_Get_Call) Run(run func(ctx context.Context, url string)) *MockTrackInfoFetcher_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTrackInfoFetcher_Get_Call) Return(_a0 TrackInfo, _a1 error) *MockTrackInfoFetcher_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTrackInfoFetcher_Get_Call) RunAndReturn(run func(context.Context, string) (TrackInfo, error)) *MockTrackInfoFetcher_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTrackInfoFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTrackInfoFetcher creates a new instance of MockTrackInfoFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTrackInfoFetcher(t mockConstructorTestingTNewMockTrackInfoFetcher) *MockTrackInfoFetcher {
	mock := &MockTrackInfoFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
