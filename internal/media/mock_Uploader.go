// Code generated by mockery v2.26.1. DO NOT EDIT.

package media

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUploader is an autogenerated mock type for the Uploader type
type MockUploader struct {
	mock.Mock
}

type MockUploader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUploader) EXPECT() *MockUploader_Expecter {
	return &MockUploader_Expecter{mock: &_m.Mock}
}

// Upload provides a mock function with given fields: ctx, upload
func (_m *MockUploader) Upload(ctx context.Context, upload Upload) (File, error) {
	ret := _m.Called(ctx, upload)

	var r0 File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Upload) (File, error)); ok {
		return rf(ctx, upload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Upload) File); ok {
		r0 = rf(ctx, upload)
	} else {
		r0 = ret.Get(0).(File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Upload) error); ok {
		r1 = rf(ctx, upload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUploader_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockUploader_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - upload Upload
func (_e *MockUploader_Expecter) Upload(ctx interface{}, upload interface{}) *MockUploader_Upload_Call {
	return &MockUploader_Upload_Call{Call: _e.mock.On("Upload", ctx, upload)}
}

func (_c *MockUploader_Upload_Call) Run(run func(ctx context.Context, upload Upload)) *MockUploader_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Upload))
	})
	return _c
}

func (_c *MockUploader_Upload_Call) Return(_a0 File, _a1 error) *MockUploader_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUploader_Upload_Call) RunAndReturn(run func(context.Context, Upload) (File, error)) *MockUploader_Upload_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUploader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUploader creates a new instance of MockUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUploader(t mockConstructorTestingTNewMockUploader) *MockUploader {
	mock := &MockUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
