// Code generated by mockery v2.26.1. DO NOT EDIT.

package media

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDriver is an autogenerated mock type for the Driver type
type MockDriver struct {
	mock.Mock
}

type MockDriver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDriver) EXPECT() *MockDriver_Expecter {
	return &MockDriver_Expecter{mock: &_m.Mock}
}

// GetMetadata provides a mock function with given fields: ctx, id
func (_m *MockDriver) GetMetadata(ctx context.Context, id string) (File, error) {
	ret := _m.Called(ctx, id)

	var r0 File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (File, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) File); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDriver_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type MockDriver_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDriver_Expecter) GetMetadata(ctx interface{}, id interface{}) *MockDriver_GetMetadata_Call {
	return &MockDriver_GetMetadata_Call{Call: _e.mock.On("GetMetadata", ctx, id)}
}

func (_c *MockDriver_GetMetadata_Call) Run(run func(ctx context.Context, id string)) *MockDriver_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDriver_GetMetadata_Call) Return(_a0 File, _a1 error) *MockDriver_GetMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDriver_GetMetadata_Call) RunAndReturn(run func(context.Context, string) (File, error)) *MockDriver_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: ctx, oldKey, newKey
func (_m *MockDriver) Move(ctx context.Context, oldKey string, newKey string) error {
	ret := _m.Called(ctx, oldKey, newKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, oldKey, newKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDriver_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockDriver_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - ctx context.Context
//   - oldKey string
//   - newKey string
func (_e *MockDriver_Expecter) Move(ctx interface{}, oldKey interface{}, newKey interface{}) *MockDriver_Move_Call {
	return &MockDriver_Move_Call{Call: _e.mock.On("Move", ctx, oldKey, newKey)}
}

func (_c *MockDriver_Move_Call) Run(run func(ctx context.Context, oldKey string, newKey string)) *MockDriver_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDriver_Move_Call) Return(_a0 error) *MockDriver_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDriver_Move_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDriver_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, upload
func (_m *MockDriver) Put(ctx context.Context, upload Upload) (File, error) {
	ret := _m.Called(ctx, upload)

	var r0 File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Upload) (File, error)); ok {
		return rf(ctx, upload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Upload) File); ok {
		r0 = rf(ctx, upload)
	} else {
		r0 = ret.Get(0).(File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Upload) error); ok {
		r1 = rf(ctx, upload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDriver_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockDriver_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - upload Upload
func (_e *MockDriver_Expecter) Put(ctx interface{}, upload interface{}) *MockDriver_Put_Call {
	return &MockDriver_Put_Call{Call: _e.mock.On("Put", ctx, upload)}
}

func (_c *MockDriver_Put_Call) Run(run func(ctx context.Context, upload Upload)) *MockDriver_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Upload))
	})
	return _c
}

func (_c *MockDriver_Put_Call) Return(_a0 File, _a1 error) *MockDriver_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDriver_Put_Call) RunAndReturn(run func(context.Context, Upload) (File, error)) *MockDriver_Put_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDriver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDriver creates a new instance of MockDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDriver(t mockConstructorTestingTNewMockDriver) *MockDriver {
	mock := &MockDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
